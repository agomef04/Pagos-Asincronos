version: '2.2'

services:
  mysql:
    image: mysql
    container_name: mysql_container
    volumes:
      - db-data:/var/lib/backup/data
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: pagosAsincronosDB
      MYSQL_PASSWORD: root
    ports:
      - "3307:3307"
    networks:
      - database

  rabbitmq:
    image: rabbitmq:3.8.2
    container_name: rabbitmq_container
    ports:
      - "5672:5672"
    networks:
      - rabbit

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.14
    container_name: elasticsearch_container
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elastic

  angular:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
    networks:
      - fronted

  springboot-rabbit:
    build:
      context: ./RabbitMQ
      dockerfile: Dockerfile
    depends_on:
      - mysql
      - rabbitmq
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/pagosAsincronosDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    networks:
      - database
      - rabbit
      
  spring-websocket:
    build:
      context: ./springBootWebsocket/WebSocket
      dockerfile: Dockerfile
    depends_on:
      - mysql
      - elasticsearch
      - rabbitmq
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/pagosAsincronosDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    networks:
      - fronted
      - elastic
      - rabbit
      - database
  

  
  
  

volumes:
  db-data:

networks:
  fronted: 
    driver: bridge  
  elastic: 
    driver: bridge  
  rabbit: 
    driver: bridge   
  database: 
    driver: bridge
